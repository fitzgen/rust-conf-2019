* Myth/Story Structures
** Fundamentals of Story Structure
https://writingcooperative.com/fundamentals-of-story-structure-e199f131a891
*** Act 1
**** _Inciting Incident_
***** Protagonist's regular life interrupted
***** Kicks off series of events leading to climax
***** Presents a challenge, leading protagonist to create a goal
***** Protagonist is trying to achieve this goal for the rest of the story
**** _Turning Point 1_
***** Protagonist decides to go on the adventure
***** Conscious decision to pursue further
*** Act 2
**** Escalating series of events during struggle to accomplish goal
**** _Mid Point_
***** Protagonist realizes that they cannot turn back
***** Continuing now easier than giving up
**** _Turning Point 2_
***** Culmination of second act
***** Protagonist is (temporarily) defeated
***** Outlook is bleak
*** Act 3
**** Climax
***** Protagonist's final battle
***** Twist that enables protagonist to win or overcome previous mistakes
***** Results in protagonist fulfilling goal created by the inciting incident
**** Resolution
** Eight-Point Arc
https://www.dailywritingtips.com/how-to-structure-a-story-the-eight-point-arc/
*** 1. Stasis
**** Every-day life; routine
*** 2. Trigger
**** Event that sparks the story
**** Beyond the control of the protagonist
*** 3. Quest
**** Result of the trigger
**** Creates protagonist's goal to fix whatever went wrong in the trigger
*** 4. Surprise
**** Obstacles, complications, and conflict for protagonist
**** The protagonist is growing and learning
*** 5. Critical Choice
**** Reveals the character of the protagonist
**** Actual choice, not accidental
*** 6. Climax
**** Result of the critical choice
**** Highest tension in story
*** 7. Reversal
**** Consequence of the climax (and therefore also critical choice)
**** Should result in a change of the protagonist
*** 8. Resolution
**** The new stasis
**** A new routine life
**** Wiser characters; goal laid out in quest achieved
* My talk in the myth structure
** Stasis
*** Rust day job
*** Pottery as artistic escape hatch
** Inciting Incident / Trigger
*** Pottery going bad; no undo :(
*** can I think of a particular piece exploding in the kiln?
** Turning Point 1 / Quest
*** Decision to make generative plotter art with Rust
*** Buy an axidraw
** Mid Point
*** how to use a pen plotter?
**** SVG
**** saxi
*** what is generative art?
**** similarities with pottery
***** emergent effects
***** infinitely deep
*** First crystal
**** how it is made
** Turning Point 2 / Surprise
*** Iteration / feedback loop still really slow
*** Tooling based on @bendotK's post
**** TODO: find it and link it
*** <insert sample/analysis of commits>
** Climax
*** Need to build `fart serve` and `fart::user_const!`
*** Tide
** Reversal
*** I am now more productive
**** More crystals
***** Made in fraction of the time of others
**** More other pieces
***** polygons-in-contact -> disarray
***** Line fields?
** Resolution
*** No longer limited by feedback loop and turnaround times
*** Focusing on art rather than methods
*** Art and math intertwined
*** Find quote about "is there enough art? only you would make your art, so it is worth it" thing
**** I think by Niel Gaiman?!
* More of inspiration for different pieces rather than excruciating details of algorithm
** looking at nature, microscopy, etc
* Similarities / metaphors between pottery and generative art / pen plotters
** infinitely deep
** process based
** using a kick wheel rather than a motorized wheel; using old pen plotters rather than new ones
** emergent behavior in generative art; emergent patterns in glaze combinations / overlaps
** do the same thing twice, get two similar yet different outcomes
*** rng seeds
*** small differences in clay / temperature / whatever
* Random articles that may have good resources / definitions
** https://www.artnome.com/news/2018/8/8/why-love-generative-art
* Task list:
** DONE make a bunch of art with pen plotter!
** TODO make outline of talk/slides
** TODO actually make polished slides
* Outline
** Draft 1
*** Flatulence, Crystals, and Happy Little Accidents
Nick Fitzgerald
RustConf 2019
**** hi
**** thanks for coming to my talk about algorithmic art and Rust
**** back up first
*** Rust and WebAssembly Working Group
**** make fast things
**** make robust things
**** make good developer experiences, and support many use cases, and help others make fast and robust things
**** these are good things!
**** hopefully also valuable things: enough that it pays my bills at least
**** they're even interesting and fun things!
**** but sometimes it feels like a lot of serious business
**** I was hacking on little crates and side projects for fun
***** but they had this tendency of becoming work
***** not just in the sense of being a maintainer and fielding bug reports and all that
***** but that once I'd proven out some idea in my spare time, we folded it into work
**** not a well-rounded life
*** Pottery
**** took up pottery as a hobby
**** feeling the clay with my hands and shaping it appealed to me
**** aiming to bring some art into my life
**** something that isn't for other people:
***** doesn't have stakeholders or need to support use cases
***** doesn't have to be robust
***** something that is just for me
***** something that is just for fun
*** Pottery Process
Wedge -> Throw -> Biscuit Fire -> Glaze -> Glaze Fire
**** wedge
***** like kneading bread, but opposite goal: remove air bubbles rather than introduce oxygen
**** throw
***** put clay on the pottery wheel
***** wheel spins, you shape the clay into a bowl/mug
**** biscuit fire
***** first time the pottery goes into the kiln
***** makes the piece hard, hold its shape
***** becomes porous for absorbing glaze
**** glaze
***** apply the "paint" to the piece
***** kind of chalky at this stage
***** color is kind of dull
**** glaze fire
***** finishes the piece
***** melts the glaze
***** glaze becomes glassy
***** glaze gets colorful
**** what I really liked about pottery
***** you can spend a lifetime exploring just one corner of the pottery process
****** there's so much depth to it
****** https://www.instagram.com/p/BPJEw4nhqfU/
***** for me: glaze in particular, the whole is greater than the parts
****** put a coat of white glaze on top of black glaze and it comes out green(!?!)
**** discovered that if I put TODO glaze over TODO glaze, then
***** I got something that came out metallic and shimmery,
***** almost like an oil slick
***** neither glaze alone had this property, but combine them and something new _emerges_
***** tried to recreate this with 5 bowls
***** only 1 made it through the whole process
**** pottery is very difficult and requires lots of patience
***** things can break every step of the way
***** wedging:
****** didn't get all air bubbles out -> piece will _explode_ in the kiln later
***** throwing:
****** twitch a finger / stop paying attention / do _anything_ wrong -> have to start over
***** this difficulty is part of the craft and what makes it so impressive!
***** realization:
****** despite all these things about pottery that I really enjoyed,
****** I was getting more frustrated by pottery's difficulty than I was having fun
*** Algorithmic Art
**** seen "Generative Art" and "Algorithmic Art" and "Creative Coding" around
**** TODO quick description of what this is
**** has many of the same things that I like about pottery
***** sum > parts
****** combine glazes and get a new glaze that is completely different from original glazes
****** simple rules combine -> create emergent behavior that is bigger than any of the rules alone
**** but it never quite grabbed me so tightly that I was overcome by the urge to produce it myself
**** there was still something missing:
***** nothing to hold onto; nothing physical
*** Pen Plotters
**** and then I discovered pen plotters
**** a pen plotter is a robot
***** you put a pen in its hand
***** and then you tell it to draw something
***** and it draws it
***** now you have a physical, pen and paper artifact of your algorithm!!
**** in addition to an artifact that you can hold/frame/give to someone, adds more room for emergence:
***** a pen doesn't draw perfect Euclidean lines with zero area
***** use different pens and they draw different lines
****** color
****** width
****** fountain pens
****** markers
****** gel pens
***** ink bleeds
****** move pen faster -> less bleeding
****** move pen slower -> more bleeding
***** colors combine
****** draw a blue line on top of a yellow one -> get a green that you don't even have a marker for
****** draw yellow on top of blue and it comes out different
***** the lines retain some of the imperfections of the pen,
****** the paper,
****** the table shaking as you walk by
**** _this_ is what I was missing from generative art
***** I'm hooked
**** so I made my decision:
***** I'm going to make algorithmic art
***** and I'm going to make it physical by drawing it with a pen plotter
**** so I bought a pen plotter
*** How do I use a pen plotter?
SVG -> Pen Plotter
**** Like most of you, probably, I didn't know how to use a pen plotter
***** what is the process to go from zero to drawn artifact?
**** Easiest way is to use _SVG_
***** TODO include image from wikipedia showing raster vs vector graphics
***** scalable vector graphics
***** image format
***** but instead of talking about a set of pixels, like bitmaps, jpg, or png do
***** talks about a set of shapes and lines
***** these shapes and lines are described within some abstract coordinate space
***** pen plotter can scale the SVG's coordinate space to the page it's drawing on
****** and draw these lines and shapes with the pen you give it
**** for the Axidraw, use `saxi`
***** nice Web frontend to control the plotter
***** makes getting the pen up/down height and centering on the page easy
*** How do I generate an SVG from Rust?
Rust program -> SVG -> Pen Plotter
**** ok, so if I want to plot my own art, I need to write a program to generate an SVG
**** for me, there is no question that this program will be written in Rust
*** Use the `svg` crate
```
use svg::node::element;

let data = element::path::Data::new()
    .move_to((10, 10))
    .line_to((60, 20))
    .line_to((25, 60))
    .close();

let path = element::Path::new()
    .set("fill", "none")
    .set("stroke", "black")
    .set("stroke-width", 3)
    .set("d", data);

let document = svg::Document::new()
    .set("viewBox", (0, 0, 70, 70))
    .add(path);

svg::save("triangle.svg", &document)?;
```
**** I started out using the `svg` crate
***** gives you a nice little builder-style API for creating SVGs
**** this example draws a triangle
**** the _path data_ describes a sequence of strokes in the coordinate space
***** moves the pen to `10, 10`
***** draws a line to `60, 20`, and another line from there to `25, 60`
***** the `close` draws a line back to the first point, `10, 10`
**** the _path element_ describes the styles of how the strokes should be drawn
***** these styles are ignored by the pen plotter!
***** stroke width and color are determined by what pen we give the plotter
***** useful to us when checking out what our generated SVG will roughly look like when plotted
**** finally, the _document_ is the whole SVG image
***** its _view box_ is the box in the coordinate space that we see as an image
***** can scale the view box up and down to make elements inside it smaller or larger
*** And here is the SVG that is generated!

<svg viewBox="0 0 70 70" xmlns="http://www.w3.org/2000/svg">
  <path d="M10,10 L60,20 L25,60 z"
        fill="none"
        stroke="black"
        stroke-width="3"/>
</svg>

TODO: triangle.svg screenshot

TODO: photo of triangle.svg plotted

*** Babby's First Plotted Art!
TODO: image of rects/tiled stuff
**** TODO description of algorithm
*** What is the process really?
Rust program -> SVG -> Pen Plotter
     ^           |
     |           |
     `-----------'
**** TODO BenDotK link
