* Myth/Story Structures
** Fundamentals of Story Structure
https://writingcooperative.com/fundamentals-of-story-structure-e199f131a891
*** Act 1
**** _Inciting Incident_
***** Protagonist's regular life interrupted
***** Kicks off series of events leading to climax
***** Presents a challenge, leading protagonist to create a goal
***** Protagonist is trying to achieve this goal for the rest of the story
**** _Turning Point 1_
***** Protagonist decides to go on the adventure
***** Conscious decision to pursue further
*** Act 2
**** Escalating series of events during struggle to accomplish goal
**** _Mid Point_
***** Protagonist realizes that they cannot turn back
***** Continuing now easier than giving up
**** _Turning Point 2_
***** Culmination of second act
***** Protagonist is (temporarily) defeated
***** Outlook is bleak
*** Act 3
**** Climax
***** Protagonist's final battle
***** Twist that enables protagonist to win or overcome previous mistakes
***** Results in protagonist fulfilling goal created by the inciting incident
**** Resolution
** Eight-Point Arc
https://www.dailywritingtips.com/how-to-structure-a-story-the-eight-point-arc/
*** 1. Stasis
**** Every-day life; routine
*** 2. Trigger
**** Event that sparks the story
**** Beyond the control of the protagonist
*** 3. Quest
**** Result of the trigger
**** Creates protagonist's goal to fix whatever went wrong in the trigger
*** 4. Surprise
**** Obstacles, complications, and conflict for protagonist
**** The protagonist is growing and learning
*** 5. Critical Choice
**** Reveals the character of the protagonist
**** Actual choice, not accidental
*** 6. Climax
**** Result of the critical choice
**** Highest tension in story
*** 7. Reversal
**** Consequence of the climax (and therefore also critical choice)
**** Should result in a change of the protagonist
*** 8. Resolution
**** The new stasis
**** A new routine life
**** Wiser characters; goal laid out in quest achieved
* My talk in the myth structure
** Stasis
*** Rust day job
*** Pottery as artistic escape hatch
** Inciting Incident / Trigger
*** Pottery going bad; no undo :(
*** can I think of a particular piece exploding in the kiln?
** Turning Point 1 / Quest
*** Decision to make generative plotter art with Rust
*** Buy an axidraw
** Mid Point
*** how to use a pen plotter?
**** SVG
**** saxi
*** what is generative art?
**** similarities with pottery
***** emergent effects
***** infinitely deep
*** First crystal
**** how it is made
** Turning Point 2 / Surprise
*** Iteration / feedback loop still really slow
*** Tooling based on @bendotK's post
**** TODO: find it and link it
*** <insert sample/analysis of commits>
** Climax
*** Need to build `fart serve` and `fart::user_const!`
*** Tide
** Reversal
*** I am now more productive
**** More crystals
***** Made in fraction of the time of others
**** More other pieces
***** polygons-in-contact -> disarray
***** Line fields?
** Resolution
*** No longer limited by feedback loop and turnaround times
*** Focusing on art rather than methods
*** Art and math intertwined
*** Find quote about "is there enough art? only you would make your art, so it is worth it" thing
**** I think by Niel Gaiman?!
* More of inspiration for different pieces rather than excruciating details of algorithm
** looking at nature, microscopy, etc
* Similarities / metaphors between pottery and generative art / pen plotters
** infinitely deep
** process based
** using a kick wheel rather than a motorized wheel; using old pen plotters rather than new ones
** emergent behavior in generative art; emergent patterns in glaze combinations / overlaps
** do the same thing twice, get two similar yet different outcomes
*** rng seeds
*** small differences in clay / temperature / whatever
* Random articles that may have good resources / definitions
** https://www.artnome.com/news/2018/8/8/why-love-generative-art
* Task list:
** DONE make a bunch of art with pen plotter!
** TODO make outline of talk/slides
** TODO actually make polished slides
* Corpus of art to entice folks with
** https://elartedigital.files.wordpress.com/2010/04/schotter-nees.jpg
Georg Nees
"Schotter"
1960s
** https://twitter.com/paulrickards/status/1133489029515751425
Paul Rickards
"Entropy variation"
2019
** http://reas.com/p13_s/reas_p13_s_0.jpg
Casey Reas
"Process 13"
2010
*** Co-inventor of Processing
**** Probably the most influential generative art framework in current use
** https://img.inconvergent.net/img/plot/7448ddf.jpg
Anders Hoff
"7448ddf"
2017
** https://www.instagram.com/p/Bu879UZnuls/
Alexi Andre
#802
2019
** https://tylerxhobbs.com/#/reach/
Tyler Hobbs
"Reach"
2019
** https://www.kovach.me/art/2018-03-29-see.html
Benjamin Kovach
"See"
2018
** https://live.staticflickr.com/8376/8558953361_cdc4edf831_k.jpg
Desmond Paul Henry
Untitled
1962
* Outline
** Draft 1
*** Flatulence, Crystals, and Happy Little Accidents
Nick Fitzgerald
RustConf 2019
**** hi
**** thanks for coming to my talk about algorithmic art and Rust
**** back up first
*** Rust and WebAssembly Working Group
**** make fast things
**** make robust things
**** make good developer experiences, and support many use cases, and help others make fast and robust things
**** these are good things!
**** hopefully also valuable things: enough that it pays my bills at least
**** they're even interesting and fun things!
**** but sometimes it feels like a lot of serious business
**** I was hacking on little crates and side projects for fun
***** but they had this tendency of becoming work
***** not just in the sense of being a maintainer and fielding bug reports and all that
***** but that once I'd proven out some idea in my spare time, we folded it into work
**** not a well-rounded life
*** Pottery
**** took up pottery as a hobby
**** feeling the clay with my hands and shaping it appealed to me
**** aiming to bring some art into my life
**** something that isn't for other people:
***** doesn't have stakeholders or need to support use cases
***** doesn't have to be robust
***** something that is just for me
***** something that is just for fun
*** Pottery Process
Wedge -> Throw -> Biscuit Fire -> Glaze -> Glaze Fire
**** wedge
***** like kneading bread, but opposite goal: remove air bubbles rather than introduce oxygen
**** throw
***** put clay on the pottery wheel
***** wheel spins, you shape the clay into a bowl/mug
**** biscuit fire
***** first time the pottery goes into the kiln
***** makes the piece hard, hold its shape
***** becomes porous for absorbing glaze
**** glaze
***** apply the "paint" to the piece
***** kind of chalky at this stage
***** color is kind of dull
**** glaze fire
***** finishes the piece
***** melts the glaze
***** glaze becomes glassy
***** glaze gets colorful
**** what I really liked about pottery
***** you can spend a lifetime exploring just one corner of the pottery process
****** there's so much depth to it
****** https://www.instagram.com/p/BPJEw4nhqfU/
***** for me: glaze in particular, the whole is greater than the parts
****** put a coat of white glaze on top of black glaze and it comes out green(!?!)
**** discovered that if I put TODO glaze over TODO glaze, then
***** TODO green and black?
***** I got something that came out metallic and shimmery,
***** almost like an oil slick
***** neither glaze alone had this property, but combine them and something new _emerges_
***** tried to recreate this with 5 bowls
***** only 1 made it through the whole process
**** pottery is very difficult and requires lots of patience
***** things can break every step of the way
***** wedging:
****** didn't get all air bubbles out -> piece will _explode_ in the kiln later
***** throwing:
****** twitch a finger / stop paying attention / do _anything_ wrong -> have to start over
***** this difficulty is part of the craft and what makes it so impressive!
***** realization:
****** despite all these things about pottery that I really enjoyed,
****** I was getting more frustrated by pottery's difficulty than I was having fun
*** Algorithmic Art
**** seen "Generative Art" and "Algorithmic Art" and "Creative Coding" around
**** TODO quick description of what this is
**** has many of the same things that I like about pottery
***** sum > parts
****** combine glazes and get a new glaze that is completely different from original glazes
****** simple rules combine -> create emergent behavior that is bigger than any of the rules alone
**** but it never quite grabbed me so tightly that I was overcome by the urge to produce it myself
**** there was still something missing:
***** nothing to hold onto; nothing physical
*** Pen Plotters
**** and then I discovered pen plotters
**** a pen plotter is a robot
***** you put a pen in its hand
***** and then you tell it to draw something
***** and it draws it
***** now you have a physical, pen and paper artifact of your algorithm!!
**** in addition to an artifact that you can hold/frame/give to someone, adds more room for emergence:
***** a pen doesn't draw perfect Euclidean lines with zero area
***** use different pens and they draw different lines
****** color
****** width
****** fountain pens
****** markers
****** gel pens
***** ink bleeds
****** move pen faster -> less bleeding
****** move pen slower -> more bleeding
***** colors combine
****** draw a blue line on top of a yellow one -> get a green that you don't even have a marker for
****** draw yellow on top of blue and it comes out different
***** the lines retain some of the imperfections of the pen,
****** the paper,
****** the table shaking as you walk by
**** _this_ is what I was missing from generative art
***** I'm hooked
**** so I made my decision:
***** I'm going to make algorithmic art
***** and I'm going to make it physical by drawing it with a pen plotter
**** so I bought a pen plotter
*** How do I use a pen plotter?
SVG -> Pen Plotter
**** Like most of you, probably, I didn't know how to use a pen plotter
***** what is the process to go from zero to drawn artifact?
**** Easiest way is to use _SVG_
***** TODO include image from wikipedia showing raster vs vector graphics
***** scalable vector graphics
***** image format
***** but instead of talking about a set of pixels, like bitmaps, jpg, or png do
***** talks about a set of shapes and lines
***** these shapes and lines are described within some abstract coordinate space
***** pen plotter can scale the SVG's coordinate space to the page it's drawing on
****** and draw these lines and shapes with the pen you give it
***** Like HTML or XML, SVG is a bunch of elements
****** in pointy brackets
****** with optional attributes to control width or color
***** How many of you know HTML or XML?
****** Raise your hands
****** Great! Everyone who raised their hand is ready to be a artist!
**** for the Axidraw, use `saxi`
***** nice Web frontend to control the plotter
***** makes getting the pen up/down height and centering on the page easy
***** can't recommend it highly enough
*** How do I generate an SVG from Rust?
Rust program -> SVG -> Pen Plotter
**** ok, so if I want to plot my own art, I need to write a program to generate an SVG
**** for me, there is no question that this program will be written in Rust
**** and this is Rust Conf, so likely its the same way for you
**** but if you prefer JavaScript or Go, then use that!
*** Use the `svg` crate
```
use svg::node::element;

let data = element::path::Data::new()
    .move_to((10, 10))
    .line_to((60, 20))
    .line_to((25, 60))
    .close();

let path = element::Path::new()
    .set("fill", "none")
    .set("stroke", "black")
    .set("stroke-width", 3)
    .set("d", data);

let document = svg::Document::new()
    .set("viewBox", (0, 0, 70, 70))
    .add(path);

svg::save("triangle.svg", &document)?;
```
**** I started out using just the `svg` crate directly
***** gives you a nice little builder-style API for creating SVGs
**** this example draws a triangle
**** the _path data_ describes a sequence of strokes in the coordinate space
***** moves the pen to `10, 10`
***** draws a line to `60, 20`, and another line from there to `25, 60`
***** the `close` draws a line back to the first point, `10, 10`
**** the _path element_ describes the styles of how the strokes should be drawn
***** these styles are ignored by the pen plotter!
***** stroke width and color are determined by what pen we give the plotter
***** useful to us when checking out what our generated SVG will roughly look like when plotted
**** finally, the _document_ is the whole SVG image
***** its _view box_ is the box in the coordinate space that we see as an image
***** can scale the view box up and down to make elements inside it smaller or larger
*** And here is the SVG that is generated!
```
<svg viewBox="0 0 70 70" xmlns="http://www.w3.org/2000/svg">
  <path d="M10,10 L60,20 L25,60 z"
        fill="none"
        stroke="black"
        stroke-width="3"/>
</svg>
```

TODO: triangle.svg screenshot

TODO: photo of triangle.svg plotted
*** Rectangles
```
trait Rect: Default {
    type Node: svg::node::Node;

    fn draw(
        &mut self,
        rng: &mut impl Rng,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
        value: f64,
    ) -> Self::Node;
}
```
**** now that I could generate SVGs, I set out an exercise for myself
**** how many ways could I fill a rectangle?
**** parameterized by a "darkness" value
***** where 0 ~= white
***** and 1 ~= black
*** Rectangles
Rectangle 2:
https://raw.githubusercontent.com/fitzgen/rects/master/images/2019-01-14-01-51-39-827170000.png

Rectangle 6:
https://raw.githubusercontent.com/fitzgen/rects/master/images/2019-01-16-04-44-00-236808000.png

Rectangle 8:
https://raw.githubusercontent.com/fitzgen/rects/master/images/2019-01-18-02-55-31-641547000.png
*** Tilings
```
trait Tiling {
    fn new(rng: &mut impl Rng, width: usize, height: usize) -> Self;

    fn get_value(&mut self, rng: &mut impl Rng, x: usize, y: usize) -> f64;
}
```
**** next I explored ways to compose these rectangles by tiling them and varying the darkness value
*** Tiling 0 of Rectangle 10
https://raw.githubusercontent.com/fitzgen/rects/master/images/2019-01-19-19-02-17-359541000.png
**** _Tiling 0_ gave each rectangle a darkness value based on its y position in the tiling
***** the first row at the top had near-0 value, making it very light,
***** and then as you go down to the bottom the rectangles get darker and darker,
***** creating a gradient effect
*** Tiling 3 of Rectangle 2
https://raw.githubusercontent.com/fitzgen/rects/master/images/2019-01-19-21-13-40-960604000.png
**** _Tiling 3_ assigns darkness based on how close a rectangle is to the center of the tiling
**** but then introduces a little bit of random noise to perturb the results
**** what I like about the piece
***** the kaleidoscope effect
***** almost looks like stained glass
***** this is another example of _emergent properties_ of generative art
****** created by the ways a rectangle's interior squares are positioned
****** how they happen to interact with
*** Tiling 3 of Rectangle 2; Plotted
https://twitter.com/fitzgen/status/1088241756464865280/photo/1
**** This was my favorite of the tiling exercise; so I decided to plot it
**** another surprise: lines thicker -> much darker than anticipated
**** more ghostly
*** Take Aways
**** Constraint breeds creativity
***** The hardest part is looking at a blank canvas and deciding what to do
****** side step it by giving yourself constraints and an exercise
****** and do as many things as you can within those constraints
****** maybe even just sit down and write a list of all the things that might fit those constraints first
****** and then start coding them afterwards
****** potential constraints for exercises:
******* How many ways can I fill a rectangle with some `value` of darkness?
******* How many ways can I render some sort of brush stroke, given a path of points?
******* How many ways can I visualize Perlin noise?
******* How many ways can I visualize binary numbers?
******* How many ways can I draw random walks?
****** once you have a bunch of methods for drawing within those constraints, how can you combine them?
******* How can I tile these rectangles and their darkness values?
******* Which of my brush strokes look nice when rendering Perlin noise?
******* What if I constructed a path to draw based on the intersection points of two random walks?
**** Simple combinations of simple primitives
Corollary: We don't need a framework to start making art
***** It doesn't take much to start making art
***** You don't have to learn a framework like Processing or Open Frameworks or Nannou
***** You can start *now*!
***** I did these first pieces with just the `svg` crate
****** but we don't even need that
****** could just as easily concatenate strings of SVG fragments together!
***** I mention this because learning new frameworks can be intimidating/frustrating/slow
****** and the best way to start making art is to hit the ground running
****** once you have a problem that can be solved by a framework, then reach for a framework
** Claim: Plotters Support SVG.
Verdict: *Half True*
*** https://static.politifact.com/rulings/tom-halftrue.png
*** SVG supports filling in shapes with a color or gradient
**** the pen plotter will only draw the outline of the shape
**** if you want some sort of fill, you have to add hatch lines yourself, or another pattern of lines
*** SVG elements can be assigned a Z-index
**** like HTML and CSS: elements with a higher Z-index occlude elements lower Z-index
***** ignoring transparency, you only see the element with the higher Z-index
***** whether the lower Z-index element was ever rendered or not is an impl detail of the rendering engine
****** either way we never see it
**** on the other hand: pen plotters will draw the shape underneath, and then draw the shape on top
***** if you didn't want to see the lower Z-index shape
****** then you need to figure out how to do that yourself
**** multiple ways to solve this problem, notably:
***** use ray casting to figure out what is visible to the camera
****** break every path down into epsilon-length line segments and check if anything occludes segment
****** it is imprecise, but you can make epsilon smaller than the smallest line your plotter can draw
******* so in practice it doesn't natter
****** Applies to anything you might draw with the pen plotter
******* since the pen plotter can really only draw lines
***** use Computational Geometry algorithms to find precise intersection points
****** Upside: precise answers! (If all the calculations fit in your number representation)
******* These algorithms are capital-F Fun
******* feels like you're one small chain link in a succession that leads all the way back to Euclid
******** especially when you're using the `euclid` crate
****** downside: not as generally applicable as ray casting
******* for example: different algorithms for convex vs concave shapes
*** This is a good time to either
1. Reach for a library
2. Start using a framework that does this for you
3. Decide to go down the rabbit hole and write your own library or framework
*** Fitzgen's Art
**** I decided to pursue the last option
**** started collecting comp. geom. algorithms/utilities in a collection of crates called "Fitzgen's Art"
**** "Fitzgen's Art" was too bloated, so to release some of the pressure, it became "fart"
***** hence the "flatulence" part of this talk's title
***** OK, now we have the only fart joke in the talk out of the way
** Crystals
*** TODO
** What is the process really?
Rust program -> SVG -> Pen Plotter
     ^           |
     |           |
     `-----------'
*** Actually there's a feedback loop
**** don't write perfect programs the first time
***** "if it compiles then it works" doesn't really apply
I haven't found a way to encode my aesthetic taste into something that the
borrow checker can enforce at compile time yet
**** I'm doing a lot of
***** edit
***** compile
***** run
***** alt-tab to Firefox
***** refresh
***** alt-tab back to Emacs
***** repeat
**** feedback loop is not as fast as I'd like
*** Someone already laid out exactly how to solve this problem!
https://www.kovach.me/posts/2018-10-13-infrastructure-of-art.html
**** Use a file watcher -> recompile and rerun on every change
**** if recompiles OK && generates SVG OK then
***** save image as `images/<timestamp>.svg`
***** symlink as `images/latest.svg`
***** make a git commit of everything: images and code
This way you never lose any image you ever generate and you also have the code
that generated the image, if you want to go back and riff on a different theme
from what you did the first time
*** But the this didn't solve the problem
**** still spending a lot of time switching contexts and alt-tab'ing between Emacs and Firefox
**** still feel like I'm _waiting_ to see what kind of effect minor changes are having on the generated SVG
*** Analysis of 100 random `crissals` commits
**** temp files: 35
**** change code/algorithm: 18
**** change constants: 38
**** formatting: 9
